{"version":3,"file":"confirmcompletion.min.js","sources":["../src/confirmcompletion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manual completion confirmation options.\n *\n * @module   mod_pulse/confirmcompletion\n * @copyright 2023, bdecent gmbh bdecent.de\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\"jquery\", 'core/str', \"core/modal_factory\", 'core/notification', 'core/ajax', \"core/fragment\", 'core/modal_events'],\n    (function($, Str, ModalFactory, notification, Ajax, Fragment, ModalEvents) {\n\n    /**\n     * Show mark as completion button confirmation modal.\n     * @param {init} contextid\n     */\n    const buttonConfirmation = function(contextid) {\n        if (document.body.classList.contains('path-course-view')) {\n            var buttons = document.querySelectorAll('.pulse-user-manualcompletion-btn');\n            buttons.forEach(function(element) {\n                element.addEventListener('click', function(e) {\n                    var classList = e.target.className;\n                    var id = classList.match(/confirmation-(\\d+)/);\n                    if (id) {\n                        id = id[1];\n                        getModal(id, contextid);\n                    }\n                });\n            });\n        }\n    };\n\n    /**\n     * Get the activity completion confirmation modal.\n     *\n     * @param {array} id instance id\n     * @param {int} contextid Context ID\n     */\n    const getModal = function(id, contextid) {\n        var args = {id: id};\n\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: Str.get_string('confirmation', 'pulse'),\n            body: '',\n            large: false\n        }).then(function(modal) {\n            modal.show();\n\n            Fragment.loadFragment('mod_pulse', 'get_confirmation_content', contextid, args)\n            .done((html, js) => {\n                modal.setBody(html);\n                return html;\n            })\n            .catch(notification.exception);\n\n            modal.setButtonText('save', Str.get_string('yes'));\n\n            modal.getRoot().on(ModalEvents.save, function(e) {\n                e.preventDefault();\n                submitformdata(args);\n                modal.getRoot().find('form').submit();\n                modal.hide();\n            });\n\n            modal.getRoot().on(ModalEvents.hidden, function() {\n                modal.destroy();\n            });\n\n            return modal;\n        }).catch(notification.exception);\n    };\n\n    /**\n     * Submit and recieve the message form the modal confirmation on the activity completion.\n     *\n     * @param {string} params\n     */\n    const submitformdata = function(params) {\n        Ajax.call([{\n            methodname: 'mod_pulse_manual_completion',\n            args: params,\n            done: function(response) {\n                window.location.reload();\n                if (response.message) {\n                    notification.addNotification({\n                        message: response.message,\n                        type: \"success\"\n                    });\n                }\n            }\n        }]);\n    };\n\n    return {\n        init: function(contextid) {\n            buttonConfirmation(contextid);\n        },\n    };\n}));"],"names":["define","$","Str","ModalFactory","notification","Ajax","Fragment","ModalEvents","getModal","id","contextid","args","create","type","types","SAVE_CANCEL","title","get_string","body","large","then","modal","show","loadFragment","done","html","js","setBody","catch","exception","setButtonText","getRoot","on","save","e","preventDefault","submitformdata","find","submit","hide","hidden","destroy","params","call","methodname","response","window","location","reload","message","addNotification","init","document","classList","contains","querySelectorAll","forEach","element","addEventListener","target","className","match","buttonConfirmation"],"mappings":";;;;;;;AAuBAA,qCAAO,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,YAAa,gBAAiB,sBAClG,SAASC,EAAGC,IAAKC,aAAcC,aAAcC,KAAMC,SAAUC,mBA4BxDC,SAAW,SAASC,GAAIC,eACtBC,KAAO,CAACF,GAAIA,IAEhBN,aAAaS,OAAO,CAChBC,KAAMV,aAAaW,MAAMC,YACzBC,MAAOd,IAAIe,WAAW,eAAgB,SACtCC,KAAM,GACNC,OAAO,IACRC,MAAK,SAASC,cACbA,MAAMC,OAENhB,SAASiB,aAAa,YAAa,2BAA4Bb,UAAWC,MACzEa,MAAK,CAACC,KAAMC,MACTL,MAAMM,QAAQF,MACPA,QAEVG,MAAMxB,aAAayB,WAEpBR,MAAMS,cAAc,OAAQ5B,IAAIe,WAAW,QAE3CI,MAAMU,UAAUC,GAAGzB,YAAY0B,MAAM,SAASC,GAC1CA,EAAEC,iBACFC,eAAezB,MACfU,MAAMU,UAAUM,KAAK,QAAQC,SAC7BjB,MAAMkB,UAGVlB,MAAMU,UAAUC,GAAGzB,YAAYiC,QAAQ,WACnCnB,MAAMoB,aAGHpB,SACRO,MAAMxB,aAAayB,YAQpBO,eAAiB,SAASM,QAC5BrC,KAAKsC,KAAK,CAAC,CACPC,WAAY,8BACZjC,KAAM+B,OACNlB,KAAM,SAASqB,UACXC,OAAOC,SAASC,SACZH,SAASI,SACT7C,aAAa8C,gBAAgB,CACzBD,QAASJ,SAASI,QAClBpC,KAAM,uBAOnB,CACHsC,KAAM,SAASzC,YA/EQ,SAASA,WAC5B0C,SAASlC,KAAKmC,UAAUC,SAAS,qBACnBF,SAASG,iBAAiB,oCAChCC,SAAQ,SAASC,SACrBA,QAAQC,iBAAiB,SAAS,SAASxB,OAEnCzB,GADYyB,EAAEyB,OAAOC,UACNC,MAAM,sBACrBpD,KACAA,GAAKA,GAAG,GACRD,SAASC,GAAIC,kBAuEzBoD,CAAmBpD"}